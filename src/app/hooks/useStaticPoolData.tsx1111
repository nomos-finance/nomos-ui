import React, { ReactElement, ReactNode, useContext } from 'react';
import {
  API_ETH_MOCK_ADDRESS,
  Network,
  normalize,
  ReserveData,
  UserReserveData,
} from '@aave/protocol-js';
import { useProtocolDataContext } from '../../libs/protocol-data-provider';
import useProtocolDataWithRpc from './usePoolData';
import { useUserWalletDataContext } from '../../libs/web3-data-provider';
// import { NetworkConfig } from '../../libs/helpers/markets/markets-data';
import { ConnectionMode, useConnectionStatusContext } from '../../libs/connection-status-provider';
import { assetsOrder } from '../../ui-config/assets';

/**
 * removes the marketPrefix from a symbol
 * @param symbol
 * @param prefix
 */
export const unPrefixSymbol = (symbol: string, prefix: string) => {
  return symbol.toUpperCase().replace(new RegExp(`^(${prefix[0]}?${prefix.slice(1)})`), '');
};

export interface StaticPoolDataContextData {
  userId?: string;
  network: Network;
  // networkConfig: NetworkConfig;
  rawReserves: ReserveData[];
  isUserHasDeposits: boolean;
  rawUserReserves?: UserReserveData[];
  userUnclaimedRewards: string;
  rewardsEmissionEndTimestamp: number;
  marketRefPriceInUsd: string;
  usdPriceEth: string;
  WrappedBaseNetworkAssetAddress: string;
  refresh: () => Promise<void>;
}

const StaticPoolDataContext = React.createContext({} as StaticPoolDataContextData);

export function StaticPoolDataProvider() {
  const { currentAccount } = useUserWalletDataContext();
  const { currentMarketData, network, networkConfig } = useProtocolDataContext();
  const { isRPCActive } = useConnectionStatusContext();

  const { error, loading, data, refresh } = useProtocolDataWithRpc(
    currentMarketData.addresses.LENDING_POOL_ADDRESS_PROVIDER,
    currentAccount,
    network,
    networkConfig.uiPoolDataProvider
  );

  const activeData = rpcData;

  const {
    rewardsData: {
      emissionEndTimestamp: rewardsEmissionEndTimestamp,
      userUnclaimedRewards: userUnclaimedRewardsRaw,
    },
    usdPriceEth,
    userId,
  } = data;

  const reserves = data.reserves
    .map((reserve) => ({
      ...reserve,
      symbol: unPrefixSymbol(reserve.symbol, currentMarketData.aTokenPrefix),
    }))
    .sort(
      ({ symbol: a }, { symbol: b }) =>
        assetsOrder.indexOf(a.toUpperCase()) - assetsOrder.indexOf(b.toUpperCase())
    );
  const userReserves = data.userReserves.map((userReserve) => ({
    ...userReserve,
    reserve: {
      ...userReserve.reserve,
      symbol: unPrefixSymbol(userReserve.reserve.symbol, currentMarketData.aTokenPrefix),
    },
  }));

  const isUserHasDeposits = userReserves.some(
    (userReserve) => userReserve.scaledATokenBalance !== '0'
  );

  const userUnclaimedRewards = normalize(
    userUnclaimedRewardsRaw,
    networkConfig.rewardTokenDecimals
  );

  let WrappedBaseNetworkAssetAddress = '';
  const reservesWithFixedUnderlying = reserves.map((reserve) => {
    if (reserve.symbol.toUpperCase() === `W${networkConfig.baseAsset}`) {
      WrappedBaseNetworkAssetAddress = reserve.underlyingAsset;
      return {
        ...reserve,
        symbol: networkConfig.baseAsset,
        underlyingAsset: API_ETH_MOCK_ADDRESS.toLowerCase(),
      };
    }
    return reserve;
  });
  const userReservesWithFixedUnderlying = userReserves.map((userReserve) => {
    if (userReserve.reserve.symbol.toUpperCase() === `W${networkConfig.baseAsset}`) {
      return {
        ...userReserve,
        reserve: {
          ...userReserve.reserve,
          symbol: networkConfig.baseAsset,
          underlyingAsset: API_ETH_MOCK_ADDRESS.toLowerCase(),
        },
      };
    }
    return userReserve;
  });

  // return (
  //   <StaticPoolDataContext.Provider
  //     value={{
  //       userId,
  //       network,
  //       networkConfig,
  //       refresh: isRPCActive ? refresh : async () => {},
  //       WrappedBaseNetworkAssetAddress,
  //       rawReserves: reservesWithFixedUnderlying,
  //       rawUserReserves: userReservesWithFixedUnderlying,
  //       isUserHasDeposits,
  //       marketRefPriceInUsd: networkConfig.usdMarket
  //         ? normalize(1, 10)
  //         : normalize(usdPriceEth, 18),
  //       usdPriceEth: normalize(usdPriceEth, 18),
  //       rewardsEmissionEndTimestamp,
  //       userUnclaimedRewards,
  //     }}
  //   >
  //     {children}
  //   </StaticPoolDataContext.Provider>
  // );
}

export const useStaticPoolDataContext = () => useContext(StaticPoolDataContext);
